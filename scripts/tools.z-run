#!/dev/null




--<< tools / fetch / curl
	
	test "${#}" -eq 2
	_url="${1}"
	_output="${2}"
	shift -- 2
	test "${#}" -eq 0
	
	rm -f -- "${_output}.tmp"
	
	if ! curl -s -f -L -- "${_url}" \
			> "${_output}.tmp" \
	; then
		rm -f -- "${_output}.tmp"
		exit -- 1
	fi
	
	if cmp -s -- "${_output}.tmp" "${_output}" ; then
		rm -- "${_output}.tmp"
		exit -- 0
	fi
	
	mv -T -- "${_output}.tmp" "${_output}"
!!




--<< tools / convert / csv-to-json
	
	test "${#}" -eq 4
	_input="${1}"
	_output="${2}"
	_dataset="${3}"
	_format="${4}"
	shift -- 4
	test "${#}" -eq 0
	
	rm -f -- "${_output}.tmp"
	
	# if ! /usr/bin/time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- \
	if ! \
			nice -n 19 -- \
			"${ZRUN[@]}" ':: tools / convert / csv-to-json / exec' \
					"${_input}" \
					"${_output}.tmp" \
					"${_dataset}" \
					"${_format}" \
	; then
		rm -f -- "${_output}.tmp"
		exit -- 1
	fi
	
	if cmp -s -- "${_output}.tmp" "${_output}" ; then
		rm -- "${_output}.tmp"
		exit -- 0
	fi
	
	mv -T -- "${_output}.tmp" "${_output}"
!!

--<<~~ tools / convert / csv-to-json / exec
	#! {{}}
	#! <python2>
	{{ ZRUN ":: tools / convert / csv-to-json / script" }}
!!

--::&&.. tools / convert / csv-to-json / script :: ../sources/csv-to-json.py




--<< tools / convert / sql-from-json
	
	test "${#}" -eq 3
	_input="${1}"
	_output="${2}"
	_format="${3}"
	shift -- 3
	test "${#}" -eq 0
	
	rm -f -- "${_output}.tmp"
	
	# if ! /usr/bin/time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- \
	if ! \
			nice -n 19 -- \
			"${ZRUN[@]}" ':: tools / convert / sql-from-json / exec' \
					"${_input}" \
					"${_output}.tmp" \
					"${_format}" \
	; then
		rm -f -- "${_output}.tmp"
		exit -- 1
	fi
	
	if cmp -s -- "${_output}.tmp" "${_output}" ; then
		rm -- "${_output}.tmp"
		exit -- 0
	fi
	
	mv -T -- "${_output}.tmp" "${_output}"
!!

--<<~~ tools / convert / sql-from-json / exec
	#! {{}}
	#! <python2>
	{{ ZRUN ":: tools / convert / sql-from-json / script" }}
!!

--::&&.. tools / convert / sql-from-json / script :: ../sources/sql-from-json.py




--<< tools / convert / sqlite
	
	test "${#}" -eq 2
	_input="${1}"
	_output="${2}"
	shift -- 2
	test "${#}" -eq 0
	
	rm -f -- "${_output}.tmp"
	
	# if ! /usr/bin/time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- \
	if ! \
			nice -n 19 -- \
			sqlite3 \
				-bail -batch \
				-init "${_input}" \
				"${_output}.tmp" \
	; then
		rm -f -- "${_output}.tmp"
		exit -- 1
	fi
	
	if cmp -s -- "${_output}.tmp" "${_output}" ; then
		rm -- "${_output}.tmp"
		exit -- 0
	fi
	
	mv -T -- "${_output}.tmp" "${_output}"
!!




--<< tools / jq / filter
	
	test "${#}" -ge 3
	_script="${1}"
	_input="${2}"
	_output="${3}"
	shift -- 3
	_flags=(
		#	--ascii-output
			"${@}"
		)
	shift -- "${#}"
	test "${#}" -eq 0
	
	rm -f -- "${_output}.tmp"
	
	# if ! /usr/bin/time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- \
	if ! \
			nice -n 19 -- \
			jqe "${_flags[@]}" \
					-f <( exec -- "${ZRUN[@]}" "${_script}" ) \
				< "${_input}" \
				> "${_output}.tmp" \
	; then
		rm -f -- "${_output}.tmp"
		exit -- 1
	fi
	
	if cmp -s -- "${_output}.tmp" "${_output}" ; then
		rm -- "${_output}.tmp"
		exit -- 0
	fi
	
	mv -T -- "${_output}.tmp" "${_output}"
!!


--<< tools / jq / filter / multi
	
	test "${#}" -ge 3
	_script="${1}"
	_output="${2}"
	shift -- 2
	_inputs=( "${@}" )
	shift -- "${#}"
	test "${#}" -eq 0
	
	exec -- "${ZRUN[@]}" ':: tools / jq / filter' \
			"${_script}" \
			<( exec -- cat -- "${_inputs[@]}" ) \
			"${_output}" \
			--slurp \
	#
!!




--<< tools / inkscape / convert
	
	test "${#}" -eq 3
	_input="${1}"
	_output="${2}"
	_format="${3}"
	shift -- 3
	test "${#}" -eq 0
	
	case "${_format}" in
		( pdf | ps | png )
			_export_flag="--export-${_format}"
		;;
		( svg )
			_export_flag="--export-plain-svg"
		;;
		( * )
			printf -- '[ii]  invalid format `%s`;  aborting!\n' "${_format}" >&2
		;;
	esac
	
	rm -f -- "${_output}.tmp"
	
	# if ! /usr/bin/time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- \
	if ! \
			nice -n 19 -- \
			inkscape \
					"${_export_flag}" "${_output}.tmp" \
					--export-area-page \
					--export-width 1200 \
					--export-text-to-path \
					--export-background '#ffffff' \
					--export-background-opacity 0.0 \
					--file "${_input}" \
				> /dev/null \
				2> /dev/null \
	; then
		rm -f -- "${_output}.tmp"
		exit -- 1
	fi
	
	if test "${_format}" == pdf ; then
		pdftk \
				"${_output}.tmp" \
				update_info \
				<(
					pdftk \
							"${_output}.tmp" \
							dump_data \
					| sed -r \
							-e 's#^InfoValue:.*#InfoValue:#' \
					#
				) \
				output \
				"${_output}.tmp.1" \
		#
		mv -T -- "${_output}.tmp.1" "${_output}.tmp"
	fi
	
	if cmp -s -- "${_output}.tmp" "${_output}" ; then
		rm -- "${_output}.tmp"
		exit -- 0
	fi
	
	mv -T -- "${_output}.tmp" "${_output}"
!!




--<< tools / columns
	
	test "${#}" -ge 2
	_input="${1}"
	_output="${2}"
	shift -- 2
	
	rm -f -- "${_output}.tmp"
	
	column \
			--table \
			--separator $'\t' \
			--output-separator '  |  ' \
		< "${_input}" \
		>| "${_output}.tmp" \
	#
	
	if cmp -s -- "${_output}.tmp" "${_output}" ; then
		rm -- "${_output}.tmp"
		exit -- 0
	fi
	
	mv -T -- "${_output}.tmp" "${_output}"
!!




--<<~~ tools / ashes
	#! {{}}
	#! <python2>
	{{ ZRUN ":: tools / ashes / script" }}
!!

--::&&.. tools / ashes / script :: ./ashes.py

