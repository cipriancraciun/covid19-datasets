#!/dev/null




<< view / jhu / plots / all
	test "${#}" -eq 0
	exec -- "${ZRUN[@]}" ':: view / jhu / plots / exec'
!!

<< view / jhu / plots / global
	test "${#}" -eq 0
	exec -- "${ZRUN[@]}" ':: view / jhu / plots / exec' -path '*/global/*'
!!

<< view / jhu / plots / continents
	test "${#}" -eq 0
	exec -- "${ZRUN[@]}" ':: view / jhu / plots / exec' -path '*/continents/*'
!!

<< view / jhu / plots / subcontinents
	test "${#}" -eq 0
	exec -- "${ZRUN[@]}" ':: view / jhu / plots / exec' -path '*/subcontinents/*'
!!

<< view / jhu / plots / romania
	test "${#}" -eq 0
	exec -- "${ZRUN[@]}" ':: view / jhu / plots / exec' -path '*/romania/*'
!!

--<< view / jhu / plots / exec
	"${ZRUN[@]}" ':: ninja'
	exec -- sxiv -i \
		< <(
			find ./plots/jhu/ \
					-type f \
					-name '*.png' \
					"${@}" \
					-print \
			| sort \
			#
		) \
	#
!!




--<<~~.. ninja / script / datasets / jhu / plots
	#! {{}}
	
	{{ range $_, $_filter := array "global" "romania" "continents" "subcontinents" }}
	{{ $_filter_all_charts := array }}
	
	{{ range $_, $_method := array "absolute" "absolute_pop100k" "relative" "delta" "deltapct" }}
	{{ $_filter_method_charts := array }}
	
	{{ range $_, $_metric := array "confirmed" "deaths" "infected" "recovered" }}
	{{ if and (eq $_method "relative") (eq $_metric "confirmed") | not }}
	
	{{ $_index := "day_index_100" }}
	{{ if or (eq $_filter "global") }}
	{{ $_index = "day_index_1k" }}
	{{ else if or (eq $_filter "continents") (eq $_filter "subcontinents") }}
	{{ $_index = "day_index_10k" }}
	{{ end }}
	
	build ./plots/jhu/{{ $_filter }}/pdf/{{ $_method }}-{{ $_metric }}.pdf : z-run-in-out $
	        ./exports/jhu/v1/values.tsv $
	        | ./sources/jhu-plot.jl ${zrun_library}
	    scriptlet = ':: plots / jhu'
	    arguments = pdf {{ $_filter }} {{ $_index }} {{ $_method }}_{{ $_metric }}
	    pool = cpu_heavy
	
	build ./plots/jhu/{{ $_filter }}/all/{{ $_method }}-{{ $_metric }}.pdf : symlink $
	        ./plots/jhu/{{ $_filter }}/pdf/{{ $_method }}-{{ $_metric }}.pdf
	
	{{ $_filter_all_charts = append $_filter_all_charts (printf "./plots/jhu/%s/all/%s-%s.pdf" $_filter $_method $_metric) }}
	{{ $_filter_method_charts = append $_filter_method_charts (printf "./plots/jhu/%s/all/%s-%s.pdf" $_filter $_method $_metric) }}
	
	{{ range $_, $_format := array "svg" "png" }}
	
	build ./plots/jhu/{{ $_filter }}/{{ $_format }}/{{ $_method }}-{{ $_metric }}.{{ $_format }} : z-run-in-out $
	        ./plots/jhu/{{ $_filter }}/pdf/{{ $_method }}-{{ $_metric }}.pdf $
	        | ${zrun_library}
	    scriptlet = ':: tools / inkscape / convert'
	    arguments = {{ $_format }}
	    pool = cpu_moderate
	
	build ./plots/jhu/{{ $_filter }}/all/{{ $_method }}-{{ $_metric }}.{{ $_format }} : symlink $
	        ./plots/jhu/{{ $_filter }}/{{ $_format }}/{{ $_method }}-{{ $_metric }}.{{ $_format }}
	
	{{ end }}
	{{ end }}
	{{ end }}
	
	build __jhu_plots__{{ $_filter }}__{{ $_method }}__pdf : phony {{ $_filter_method_charts | array_join " " }}
	{{ end }}
	
	build __jhu_plots__{{ $_filter }}__all__pdf : phony {{ $_filter_all_charts | array_join " " }}
	{{ end }}
!!




--<< plots / jhu
	
	test "${#}" -eq 6
	_dataset="${1}"
	_output="${2}"
	_format="${3}"
	_filter="${4}"
	_index="${5}"
	_metric="${6}"
	shift -- 6
	test "${#}" -eq 0
	
	export -- \
			FONTCONFIG_PATH=/etc/fonts \
	#
	
	rm -f -- "${_output}.tmp.pdf"
	
	if ! "${ZRUN[@]}" ':: tools / julia / exec' \
			./sources/jhu-plot.jl \
			"${_dataset}" \
			"${_output}.tmp.pdf" \
			pdf \
			"${_filter}" \
			"${_index}" \
			"${_metric}" \
	; then
		rm -f -- "${_output}.tmp.pdf"
		exit -- 1
	fi
	
	"${ZRUN[@]}" ':: tools / inkscape / convert' \
			"${_output}.tmp.pdf" \
			"${_output}" \
			"${_format}" \
	#
	
	rm -- "${_output}.tmp.pdf"
!!




--<< process / jhu / imports / merge
	
	test "${#}" -ge 2
	_output="${1}"
	shift -- 1
	_inputs=( "${@}" )
	shift -- "${#}"
	test "${#}" -eq 0
	
	exec -- "${ZRUN[@]}" ':: tools / jq / filter / multi' \
			':: process / jhu / imports / merge / script' \
			"${_output}" \
			"${_inputs[@]}" \
	#
!!

--::&&.. process / jhu / imports / merge / script :: ../sources/jhu-imports-merged.jq




--<< process / jhu / imports / locations
	
	test "${#}" -eq 2
	_input="${1}"
	_output="${2}"
	shift -- 2
	test "${#}" -eq 0
	
	exec -- "${ZRUN[@]}" ':: tools / jq / filter' \
			':: process / jhu / imports / locations / script' \
			"${_input}" \
			"${_output}" \
			--argfile countries ./imports/facts/countries.json \
			--argfile countries_by_alias ./imports/facts/countries-by-alias.json \
	#
!!

--::&&.. process / jhu / imports / locations / script :: ../sources/jhu-imports-locations.jq




--<< process / jhu / imports / dates
	
	test "${#}" -eq 2
	_input="${1}"
	_output="${2}"
	shift -- 2
	test "${#}" -eq 0
	
	exec -- "${ZRUN[@]}" ':: tools / jq / filter' \
			':: process / jhu / imports / dates / script' \
			"${_input}" \
			"${_output}" \
	#
!!

--::&&.. process / jhu / imports / dates / script :: ../sources/jhu-imports-dates.jq




--<< process / jhu / imports / values
	
	test "${#}" -eq 2
	_input="${1}"
	_output="${2}"
	shift -- 2
	test "${#}" -eq 0
	
	exec -- "${ZRUN[@]}" ':: tools / jq / filter' \
			':: process / jhu / imports / values / script' \
			"${_input}" \
			"${_output}" \
			--argfile dates ./imports/jhu/dates.json \
			--argfile locations ./imports/jhu/locations.json \
			--argfile countries ./imports/facts/countries.json \
			--argfile factbook ./imports/factbook/fields.json \
	#
!!

--::&&.. process / jhu / imports / values / script :: ../sources/jhu-imports-values.jq




--<< process / jhu / exports / values / json
	
	test "${#}" -eq 2
	_input="${1}"
	_output="${2}"
	shift -- 2
	test "${#}" -eq 0
	
	exec -- "${ZRUN[@]}" ':: tools / jq / filter' \
			':: process / jhu / exports / values / json / script' \
			"${_input}" \
			"${_output}" \
	#
!!

--::&&.. process / jhu / exports / values / json / script :: ../sources/jhu-exports-values-json.jq




--<< process / jhu / exports / values / tsv
	
	test "${#}" -eq 2
	_input="${1}"
	_output="${2}"
	shift -- 2
	test "${#}" -eq 0
	
	exec -- "${ZRUN[@]}" ':: tools / jq / filter' \
			':: process / jhu / exports / values / tsv / script' \
			"${_input}" \
			"${_output}" \
			--raw-output \
	#
!!

--::&&.. process / jhu / exports / values / tsv / script :: ../sources/jhu-exports-values-tsv.jq

