#!/dev/null




--<< tools / julia / exec
	
	test "${#}" -ge 1
	_script="${1}"
	_script_name="$( exec -- basename -- "${_script}" .jl )"
	shift -- 1
	_arguments=( "${@}" )
	shift -- "${#}"
	
	_interpreter="./.outputs/julia/bin/julia"
	_sysimage="./.outputs/julia/${_script_name}/sysimage.so"
	_compile_trace="./.outputs/julia/${_script_name}/compile.trace"
	_depot="./.outputs/julia/${_script_name}/depot"
	_project="./sources/${_script_name}.env"
	_marker="$( exec -- date -- +%s )-${$}"
	
	rm -f -- "${_compile_trace}/${_marker}.tmp"
	
	# if ! /usr/bin/time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- \
	if ! \
			nodaemon \
			env JULIA_DEPOT_PATH="${_depot}" \
			nice -n 19 -- \
			"${_interpreter}" \
					--project="${_project}" \
					--sysimage="${_sysimage}" \
					--threads=1 \
					--startup-file=no \
					--color=no \
					--trace-compile="${_compile_trace}/${_marker}.tmp" \
				-- \
					"${_script}" \
					"${_arguments[@]}" \
	; then
		rm -f -- "${_compile_trace}/${_marker}.tmp"
		exit -- 1
	fi
	
	mv -T -- \
			"${_compile_trace}/${_marker}.tmp" \
			"${_compile_trace}/${_marker}" \
	#
!!




--<< tools / julia / shell
	
	test "${#}" -eq 1
	_script_name="${1}"
	shift -- 1
	test "${#}" -eq 0
	
	_interpreter="./.outputs/julia/bin/julia"
	_sysimage="./.outputs/julia/${_script_name}/sysimage.so"
	_depot="./.outputs/julia/${_script_name}/depot"
	_project="./sources/${_script_name}.env"
	
	exec -- \
		env JULIA_DEPOT_PATH="${_depot}" \
		nice -n 19 -- \
	"${_interpreter}" \
			--project="${_project}" \
			--sysimage="${_sysimage}" \
			--startup-file=no \
			--color=no \
	#
!!




--<< tools / julia / bootstrap
	
	test "${#}" -eq 1
	_script_name="${1}"
	shift -- 1
	test "${#}" -eq 0
	
	_interpreter="./.outputs/julia/bin/julia"
	_sysimage="./.outputs/julia/${_script_name}/sysimage.so"
	_compile_trace="./.outputs/julia/${_script_name}/compile.trace"
	_compile_out="./.outputs/julia/${_script_name}/compile.sysimage"
	_depot="./.outputs/julia/${_script_name}/depot"
	_project="./sources/${_script_name}.env"
	_compile_in="${_project}/sysimage.compile"
	
	if test ! -e ./.outputs/julia ; then
		mkdir -- ./.outputs/julia
	fi
	if test ! -s "${_project}/Manifest.toml" ; then
		if test -e "./.outputs/julia/${_script_name}" ; then
			rm -R -f -- "./.outputs/julia/${_script_name}"
		fi
	fi
	if test ! -e "./.outputs/julia/${_script_name}" ; then
		mkdir -- "./.outputs/julia/${_script_name}"
	fi
	if test ! -e "${_compile_trace}" ; then
		mkdir -- "${_compile_trace}"
	fi
	if test ! -e "${_depot}" ; then
		mkdir -- "${_depot}"
	fi
	
	rm -f -- "${_sysimage}.tmp"
	rm -f -- "${_compile_out}.tmp"
	
	find "${_compile_in}" "${_compile_trace}" \
			-type f -not -name '*.tmp' \
			-exec cat -- {} + \
	| LC_ALL=C sort -u \
		>| "${_compile_out}.tmp" \
	#
	
	# if ! /usr/bin/time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- \
	if ! \
			nodaemon \
			env JULIA_DEPOT_PATH="${_depot}" \
			nice -n 19 -- \
			"${_interpreter}" \
					--startup-file=no \
					--color=no \
				-- \
					"${_project}/sysimage.jl" \
					"${_project}" \
					"${_sysimage}.tmp" \
					"${_compile_out}.tmp" \
	; then
		rm -f -- "${_sysimage}.tmp"
		rm -f -- "${_compile_out}.tmp"
		exit -- 1
	fi
	
	mv -T -- \
			"${_sysimage}.tmp" \
			"${_sysimage}" \
	#
	mv -T -- \
			"${_compile_out}.tmp" \
			"${_compile_out}" \
	#
	
	cp -T -- \
			"${_compile_out}" \
			"${_compile_in}" \
	#
	
	find "${_compile_trace}" \
			-type f -not -name '*.tmp' \
			-delete \
	#
!!




:: tools / julia / shell / generic-plot :: exec -- "${ZRUN[@]}" ':: tools / julia / shell' generic-plot "${@}"
:: tools / julia / bootstrap / generic-plot :: exec -- "${ZRUN[@]}" ':: tools / julia / bootstrap' generic-plot "${@}"

