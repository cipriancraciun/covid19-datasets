#!/dev/null




--<< tools / julia / exec
	
	test "${#}" -ge 1
	_script="${1}"
	shift -- 1
	_arguments=( "${@}" )
	shift -- "${#}"
	
	_interpreter="./.outputs/julia/bin/julia"
	_script_name="$( exec -- basename -- "${_script}" .jl )"
	_sysimage="./.outputs/julia/${_script_name}.so"
	_compile="./.outputs/julia/${_script_name}.compile"
	_marker="$( exec -- date -- +%s )-${$}"
	
	if test ! -e "${_compile}" ; then
		mkdir -- "${_compile}"
	fi
	
	rm -f -- "${_compile}/${_marker}.tmp"
	
	# if ! /usr/bin/time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- \
	if ! \
			nodaemon \
			nice -n 19 -- \
			"${_interpreter}" \
					--project=./.outputs/julia/environment \
					--sysimage="${_sysimage}" \
					--trace-compile="${_compile}/${_marker}.tmp" \
					--startup-file=no \
					--color=no \
				-- \
					"${_script}" \
					"${_arguments[@]}" \
	; then
		rm -f -- "${_compile}/${_marker}.tmp"
		exit -- 1
	fi
	
	mv -T -- \
			"${_compile}/${_marker}.tmp" \
			"${_compile}/${_marker}" \
	#
!!




--<< tools / julia / shell
	
	test "${#}" -eq 1
	_script_name="${1}"
	shift -- 1
	test "${#}" -eq 0
	
	_interpreter="./.outputs/julia/bin/julia"
	_sysimage="./.outputs/julia/${_script_name}.so"
	
	exec -- \
		nice -n 19 -- \
	"${_interpreter}" \
			--project=./.outputs/julia/environment \
			--sysimage="${_sysimage}" \
			--startup-file=no \
			--color=no \
	#
!!




--<< tools / julia / bootstrap
	
	test "${#}" -eq 1
	_script_name="${1}"
	shift -- 1
	test "${#}" -eq 0
	
	_interpreter="./.outputs/julia/bin/julia"
	_sysimage="./.outputs/julia/${_script_name}.so"
	_compile="./.outputs/julia/${_script_name}.compile"
	_compile_out="./.outputs/julia/${_script_name}.so.compile"
	
	if test ! -e ./.outputs/julia ; then
		mkdir -- ./.outputs/julia
	fi
	
	rm -f -- "${_compile_out}.tmp"
	rm -f -- "${_sysimage}.tmp"
	
	if test ! -e "${_compile}" ; then
		mkdir -- "${_compile}"
	fi
	
	find "${_compile}" \
			-type f -not -name '*.tmp' \
			-exec cat -- {} + \
	| LC_ALL=C sort -u \
		>| "${_compile_out}.tmp" \
	#
	
	# if ! /usr/bin/time -f '(( elapsed: %E (user: %U, kernel: %S), CPU: %P, memory: %M (faults: %F, swapped: %W), I/O: %I / %O (waits: %w) ))' -- \
	if ! \
			nodaemon \
			nice -n 19 -- \
			"${_interpreter}" \
					--startup-file=no \
					--color=no \
				-- \
					./sources/julia-environment.jl \
					./.outputs/julia/environment \
					"${_sysimage}.tmp" \
					"${_compile_out}.tmp" \
	; then
		rm -f -- "${_sysimage}.tmp"
		rm -f -- "${_compile_out}.tmp"
		exit -- 1
	fi
	
	mv -T -- \
			"${_sysimage}.tmp" \
			"${_sysimage}" \
	#
	mv -T -- \
			"${_compile_out}.tmp" \
			"${_compile_out}" \
	#
!!




:: tools / julia / shell / generic-plot :: exec -- "${ZRUN[@]}" ':: tools / julia / shell' generic-plot "${@}"
:: tools / julia / bootstrap / generic-plot :: exec -- "${ZRUN[@]}" ':: tools / julia / bootstrap' generic-plot "${@}"

